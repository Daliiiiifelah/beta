{
  "version": 3,
  "sources": ["../../@convex-dev/auth/src/providers/Anonymous.ts"],
  "sourcesContent": ["/**\n * Configure {@link Anonymous} provider given an {@link AnonymousConfig}.\n *\n * ```ts\n * import { Anonymous } from \"@convex-dev/auth/providers/Anonymous\";\n * import { convexAuth } from \"@convex-dev/auth/server\";\n *\n * export const { auth, signIn, signOut, store, isAuthenticated } = convexAuth({\n *   providers: [Anonymous],\n * });\n * ```\n *\n * @module\n */\n\nimport { ConvexCredentials } from \"@convex-dev/auth/providers/ConvexCredentials\";\nimport {\n  GenericActionCtxWithAuthConfig,\n  createAccount,\n} from \"@convex-dev/auth/server\";\nimport {\n  DocumentByName,\n  GenericDataModel,\n  WithoutSystemFields,\n} from \"convex/server\";\nimport { Value } from \"convex/values\";\n\n/**\n * The available options to an {@link Anonymous} provider for Convex Auth.\n */\nexport interface AnonymousConfig<DataModel extends GenericDataModel> {\n  /**\n   * Uniquely identifies the provider, allowing to use\n   * multiple different {@link Anonymous} providers.\n   */\n  id?: string;\n  /**\n   * Perform checks on provided params and customize the user\n   * information stored after sign in.\n   */\n  profile?: (\n    /**\n     * The values passed to the `signIn` function.\n     */\n    params: Record<string, Value | undefined>,\n    /**\n     * Convex ActionCtx in case you want to read from or write to\n     * the database.\n     */\n    ctx: GenericActionCtxWithAuthConfig<DataModel>,\n  ) => WithoutSystemFields<DocumentByName<DataModel, \"users\">> & {\n    isAnonymous: true;\n  };\n}\n\n/**\n * An anonymous authentication provider.\n *\n * This provider doesn't require any user-provided information.\n */\nexport function Anonymous<DataModel extends GenericDataModel>(\n  config: AnonymousConfig<DataModel> = {},\n) {\n  const provider = config.id ?? \"anonymous\";\n  return ConvexCredentials<DataModel>({\n    id: \"anonymous\",\n    authorize: async (params, ctx) => {\n      const profile = config.profile?.(params, ctx) ?? { isAnonymous: true };\n      const { user } = await createAccount(ctx, {\n        provider,\n        account: { id: crypto.randomUUID() },\n        profile: profile as any,\n      });\n      // END\n      return { userId: user._id };\n    },\n    ...config,\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;AA4DM,SAAU,UACd,SAAqC,CAAA,GAAE;AAEvC,QAAM,WAAW,OAAO,MAAM;AAC9B,SAAO,kBAA6B;IAClC,IAAI;IACJ,WAAW,OAAO,QAAQ,QAAO;AAlErC;AAmEM,YAAM,YAAU,YAAO,YAAP,gCAAiB,QAAQ,SAAQ,EAAE,aAAa,KAAI;AACpE,YAAM,EAAE,KAAI,IAAK,MAAM,cAAc,KAAK;QACxC;QACA,SAAS,EAAE,IAAI,OAAO,WAAU,EAAE;QAClC;OACD;AAED,aAAO,EAAE,QAAQ,KAAK,IAAG;IAC3B;IACA,GAAG;GACJ;AACH;",
  "names": []
}
